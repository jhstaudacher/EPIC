diff --git a/include/index/IndexFactory.h b/include/index/IndexFactory.h
index 918dd12..53c2447 100644
--- a/include/index/IndexFactory.h
+++ b/include/index/IndexFactory.h
@@ -54,6 +54,7 @@ private:
 	 */
 	enum IndexType {
 		INVALID_INDEX, /**< Unknown/Invalid power index */
+		NI,			   /**< new index */
 		ABZ,		   /**< absolute Banzhaf */
 		APG,		   /**< absolute Public Good*/
 		APIG,		   /**< absolute null-player-free Power Index G (based on the Dubey-Shapley identity)*/
diff --git a/include/index/NewIndex.h b/include/index/NewIndex.h
new file mode 100644
index 0000000..ba8b35f
--- /dev/null
+++ b/include/index/NewIndex.h
@@ -0,0 +1,27 @@
+#ifndef EPIC_INDEX_NEWINDEX_H_
+#define EPIC_INDEX_NEWINDEX_H_
+
+#include "ItfPowerIndex.h"
+#include "ItfUpperBoundApproximation.h"
+
+namespace epic::index {
+
+/**
+ * Add here a description of the new power index for the Doxygen documentation generator.
+ */
+class NewIndex : public ItfPowerIndex {
+/*
+ * Implement the ItfPowerIndex interface:
+ */
+public:
+	NewIndex(Game& g, ItfUpperBoundApproximation* approx, IntRepresentation int_representation = DEFAULT);
+	~NewIndex() override;
+
+	std::vector<bigFloat> calculate() override;
+	std::string getFullName() override;
+	longUInt getMemoryRequirement() override;
+};
+
+} // namespace epic::index
+
+#endif //EPIC_INDEX_NEWINDEX_H_
diff --git a/readme.md b/readme.md
index 4f3e506..c29725a 100644
--- a/readme.md
+++ b/readme.md
@@ -57,6 +57,7 @@ First open a terminal and go to the `epic/` directory: `cd <path_to>/epic`. Afte
 
 | shortcut | name |
 | -------- | ---- |
+| `NI` | New Index |
 | `ABZ` | Absolute Banzhaf |
 | `BZ` | Banzhaf |
 | `CC` | Coleman Collective |
diff --git a/src/index/IndexFactory.cpp b/src/index/IndexFactory.cpp
index f5e5dfe..e6ceb91 100644
--- a/src/index/IndexFactory.cpp
+++ b/src/index/IndexFactory.cpp
@@ -1,6 +1,7 @@
 #include "index/IndexFactory.h"
 
 #include "FastUpperBoundApproximation.h"
+#include "index/NewIndex.h"
 #include "index/AbsoluteBanzhaf.h"
 #include "index/AbsolutePublicGood.h"
 #include "index/AbsolutePowerIndexG.h"
@@ -42,6 +43,7 @@
 
 const std::map<epic::index::IndexFactory::IndexType, std::pair<std::string, std::string>> epic::index::IndexFactory::cIndexNames = {
 	{INVALID_INDEX, {"INVALID", "invalid index"}},
+	{NI, {"NI", "new index"}},
 	{ABZ, {"ABZ", "absolute Banzhaf"}},
 	{APG, {"APG", "absolute Public Good"}},
 	{APIG, {"APIG", "absolute null-player-free Power Index G (based on the Dubey-Shapley identity)"}},	
@@ -92,6 +94,7 @@ epic::index::ItfPowerIndex* epic::index::IndexFactory::new_powerIndex(const std:
 
 	switch (getIndexType(short_name)) {
 		case IndexType::INVALID_INDEX: index = nullptr; break;
+		case IndexType::NI: index = new NewIndex(g, approx, int_representation); break;
 		case IndexType::ABZ: index = new AbsoluteBanzhaf(g, approx, int_representation); break;
 		case IndexType::BZ: index = new Banzhaf(g, approx, int_representation); break;
 		case IndexType::APG: index = new AbsolutePublicGood(g, approx, int_representation); break;
diff --git a/src/index/NewIndex.cpp b/src/index/NewIndex.cpp
new file mode 100644
index 0000000..a25454d
--- /dev/null
+++ b/src/index/NewIndex.cpp
@@ -0,0 +1,53 @@
+#include "index/NewIndex.h"
+
+epic::index::NewIndex::NewIndex(Game& g, ItfUpperBoundApproximation* approx, IntRepresentation int_representation) : ItfPowerIndex(g) {
+	/*
+	 * Initialize the protected ItfPowerIndex::mCalculator object. This gets used to do all large integer calculations later.
+	 * For an approximation of the maximum value needed for the calculations the approx object can get used.
+	 */
+	bigInt max_value = approx->upperBound_totalNumberOfSwingPlayer();
+	mCalculator = lint::ItfLargeNumberCalculator::new_calculator(max_value, lint::Operation::addition, int_representation);
+
+	/*
+	 * If needed add additional initializations below
+	 */
+}
+
+epic::index::NewIndex::~NewIndex() {
+	/*
+	 * Delete the mCalculator object
+	 */
+	lint::ItfLargeNumberCalculator::delete_calculator(mCalculator);
+
+	/**
+	 * If needed do additional cleanup below
+	 */
+}
+
+std::vector<epic::bigFloat> epic::index::NewIndex::calculate() {
+	/*
+	 * Use mGame and mCalculator to calculate the power index and return the results.
+	 */
+	std::vector<bigFloat> solution(mGame.getNumberOfPlayers());
+	return solution;
+}
+
+std::string epic::index::NewIndex::getFullName() {
+	/*
+	 * Return the full name of the implemented power index.
+	 */
+	return "NewIndex";
+}
+
+epic::longUInt epic::index::NewIndex::getMemoryRequirement() {
+	/*
+	 * Return an approximated value of the amount of memory needed for the power index calculation.
+	 */
+	bigInt memory = 42; // write the needed memory into this variable
+
+	longUInt ret = 0;
+	if (memory.fits_ulong_p()) {
+		ret = memory.get_ui();
+	}
+	return ret;
+}
